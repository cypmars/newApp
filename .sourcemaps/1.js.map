{"version":3,"sources":["../../src/pages/signup/signup.module.ts","../../node_modules/ng2-vis/components/network/index.js","../../node_modules/ng2-vis/components/timeline/index.js","../../node_modules/ng2-vis/components/network/vis-network.service.js","../../node_modules/ng2-vis/components/timeline/vis-timeline.service.js","../../src/pages/signup/signup.ts","../../node_modules/ng2-vis/components/network/vis-network.directive.js","../../node_modules/ng2-vis/ng2-vis.js","../../node_modules/ng2-vis/components/timeline/vis-timeline.directive.js","../../node_modules/ng2-vis/components/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAyC;AACO;AAEV;AAEF;AAcpC,IAAa,gBAAgB;IAA7B;IAAgC,CAAC;IAAD,uBAAC;AAAD,CAAC;AAApB,gBAAgB;IAZ5B,+DAAQ,CAAC;QACR,YAAY,EAAE;YACZ,2DAAU;SACX;QACD,OAAO,EAAE;YACP,kDAAS;YACT,sEAAe,CAAC,QAAQ,CAAC,2DAAU,CAAC;SACrC;QACD,OAAO,EAAE;YACP,2DAAU;SACX;KACF,CAAC;GACW,gBAAgB,CAAI;AAAJ;;;;;;;;;ACnB7B;AACA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;;;;;;;;AC3JA;AACA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;;;;;;;;AC3JA;AACA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,4CAA4C,WAAW;AACvD;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,4CAA4C,WAAW;AACvD;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,YAAY;AAC3B,eAAe,eAAe;AAC9B,eAAe,kBAAkB;AACjC;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,iBAAiB;AAChC,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,iBAAiB;AAChC,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,eAAe;AAC9B;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,kBAAkB;AACjC;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,cAAc;AAC7B;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,kBAAkB;AACjC;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,eAAe,sBAAsB;AACrC;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,kBAAkB;AAC9D;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,kBAAkB;AAC9D;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;;;;;;;;ACn2BA;AACA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,YAAY;AAC3B,eAAe,iBAAiB;AAChC,eAAe,mBAAmB;AAClC;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,YAAY;AAC3B,eAAe,iBAAiB;AAChC,eAAe,kBAAkB;AACjC,eAAe,mBAAmB;AAClC;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,sBAAsB;AACrC;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,eAAe,sBAAsB;AACrC;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,sBAAsB;AACrC;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,KAAK;AACtB;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,iBAAiB,KAAK;AACtB;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,iBAAiB,iCAAiC;AAClD;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,kBAAkB,wBAAwB;AAC1C;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,kBAAkB,0BAA0B;AAC5C;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,sBAAsB;AACrC;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,MAAM;AACrB;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,eAAe,MAAM;AACrB;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,4BAA4B,4BAA4B;AACxE;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,kBAAkB;AACjC;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,iBAAiB;AAChC;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,mBAAmB;AAClC;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB;AACA,gBAAgB,MAAM;AACtB;AACA;AAC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AgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kCAAkC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;AC1HA;AACA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,gBAAgB;AAChB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kCAAkC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;ACxIA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA","file":"1.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { IonicPageModule } from 'ionic-angular';\r\n\r\nimport { SignupPage } from './signup';\r\n\r\nimport { VisModule } from 'ng2-vis';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    SignupPage\r\n  ],\r\n  imports: [\r\n    VisModule,\r\n    IonicPageModule.forChild(SignupPage)\r\n  ],\r\n  exports: [\r\n    SignupPage,\r\n  ]\r\n})\r\nexport class SignupPageModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/signup/signup.module.ts","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Vis = require(\"vis\");\r\nvar VisNetwork = (function (_super) {\r\n    __extends(VisNetwork, _super);\r\n    function VisNetwork() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return VisNetwork;\r\n}(Vis.Network));\r\nexports.VisNetwork = VisNetwork;\r\nvar VisNodes = (function (_super) {\r\n    __extends(VisNodes, _super);\r\n    function VisNodes(data, options) {\r\n        return _super.call(this, data, options) || this;\r\n    }\r\n    VisNodes.prototype.getLength = function () {\r\n        return this.length;\r\n    };\r\n    VisNodes.prototype.add = function (data, senderId) {\r\n        return _super.prototype.add.call(this, data, senderId);\r\n    };\r\n    VisNodes.prototype.clear = function (senderId) {\r\n        return _super.prototype.clear.call(this, senderId);\r\n    };\r\n    VisNodes.prototype.distinct = function (field) {\r\n        return _super.prototype.distinct.call(this, field);\r\n    };\r\n    VisNodes.prototype.flush = function () {\r\n        _super.prototype.flush.call(this);\r\n    };\r\n    VisNodes.prototype.forEach = function (callback, options) {\r\n        _super.prototype.forEach.call(this, callback, options);\r\n    };\r\n    VisNodes.prototype.getAll = function (options) {\r\n        return _super.prototype.get.call(this, options);\r\n    };\r\n    VisNodes.prototype.getById = function (id, options) {\r\n        return _super.prototype.get.call(this, id, options);\r\n    };\r\n    VisNodes.prototype.getByIds = function (ids, options) {\r\n        return _super.prototype.get.call(this, ids, options);\r\n    };\r\n    VisNodes.prototype.getDataSet = function () {\r\n        return _super.prototype.getDataSet.call(this);\r\n    };\r\n    VisNodes.prototype.getIds = function (options) {\r\n        return _super.prototype.getIds.call(this, options);\r\n    };\r\n    VisNodes.prototype.map = function (callback, options) {\r\n        return _super.prototype.map.call(this, callback, options);\r\n    };\r\n    VisNodes.prototype.max = function (field) {\r\n        return _super.prototype.max.call(this, field);\r\n    };\r\n    VisNodes.prototype.min = function (field) {\r\n        return _super.prototype.min.call(this, field);\r\n    };\r\n    VisNodes.prototype.on = function (event, callback) {\r\n        _super.prototype.on.call(this, event, callback);\r\n    };\r\n    VisNodes.prototype.off = function (event, callback) {\r\n        _super.prototype.off.call(this, event, callback);\r\n    };\r\n    VisNodes.prototype.removeItems = function (ids, senderId) {\r\n        return _super.prototype.remove.call(this, ids, senderId);\r\n    };\r\n    VisNodes.prototype.setOptions = function (options) {\r\n        _super.prototype.setOptions.call(this, options);\r\n    };\r\n    VisNodes.prototype.update = function (data, senderId) {\r\n        return _super.prototype.update.call(this, data, senderId);\r\n    };\r\n    return VisNodes;\r\n}(Vis.DataSet));\r\nexports.VisNodes = VisNodes;\r\nvar VisEdges = (function (_super) {\r\n    __extends(VisEdges, _super);\r\n    function VisEdges(data, options) {\r\n        return _super.call(this, data, options) || this;\r\n    }\r\n    VisEdges.prototype.getLength = function () {\r\n        return this.length;\r\n    };\r\n    VisEdges.prototype.add = function (data, senderId) {\r\n        return _super.prototype.add.call(this, data, senderId);\r\n    };\r\n    VisEdges.prototype.clear = function (senderId) {\r\n        return _super.prototype.clear.call(this, senderId);\r\n    };\r\n    VisEdges.prototype.distinct = function (field) {\r\n        return _super.prototype.distinct.call(this, field);\r\n    };\r\n    VisEdges.prototype.flush = function () {\r\n        _super.prototype.flush.call(this);\r\n    };\r\n    VisEdges.prototype.forEach = function (callback, options) {\r\n        _super.prototype.forEach.call(this, callback, options);\r\n    };\r\n    VisEdges.prototype.getAll = function (options) {\r\n        return _super.prototype.get.call(this, options);\r\n    };\r\n    VisEdges.prototype.getById = function (id, options) {\r\n        return _super.prototype.get.call(this, id, options);\r\n    };\r\n    VisEdges.prototype.getByIds = function (ids, options) {\r\n        return _super.prototype.get.call(this, ids, options);\r\n    };\r\n    VisEdges.prototype.getDataSet = function () {\r\n        return _super.prototype.getDataSet.call(this);\r\n    };\r\n    VisEdges.prototype.getIds = function (options) {\r\n        return _super.prototype.getIds.call(this, options);\r\n    };\r\n    VisEdges.prototype.map = function (callback, options) {\r\n        return _super.prototype.map.call(this, callback, options);\r\n    };\r\n    VisEdges.prototype.max = function (field) {\r\n        return _super.prototype.max.call(this, field);\r\n    };\r\n    VisEdges.prototype.min = function (field) {\r\n        return _super.prototype.min.call(this, field);\r\n    };\r\n    VisEdges.prototype.on = function (event, callback) {\r\n        _super.prototype.on.call(this, event, callback);\r\n    };\r\n    VisEdges.prototype.off = function (event, callback) {\r\n        _super.prototype.off.call(this, event, callback);\r\n    };\r\n    VisEdges.prototype.removeItems = function (ids, senderId) {\r\n        return _super.prototype.remove.call(this, ids, senderId);\r\n    };\r\n    VisEdges.prototype.setOptions = function (options) {\r\n        _super.prototype.setOptions.call(this, options);\r\n    };\r\n    VisEdges.prototype.update = function (data, senderId) {\r\n        return _super.prototype.update.call(this, data, senderId);\r\n    };\r\n    return VisEdges;\r\n}(Vis.DataSet));\r\nexports.VisEdges = VisEdges;\r\n__export(require(\"./vis-network.directive\"));\r\n__export(require(\"./vis-network.service\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ng2-vis/components/network/index.js\n// module id = 303\n// module chunks = 1","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Vis = require(\"vis\");\r\nvar VisTimelineItems = (function (_super) {\r\n    __extends(VisTimelineItems, _super);\r\n    function VisTimelineItems(data, options) {\r\n        return _super.call(this, data, options) || this;\r\n    }\r\n    VisTimelineItems.prototype.getLength = function () {\r\n        return this.length;\r\n    };\r\n    VisTimelineItems.prototype.add = function (data, senderId) {\r\n        return _super.prototype.add.call(this, data, senderId);\r\n    };\r\n    VisTimelineItems.prototype.clear = function (senderId) {\r\n        return _super.prototype.clear.call(this, senderId);\r\n    };\r\n    VisTimelineItems.prototype.distinct = function (field) {\r\n        return _super.prototype.distinct.call(this, field);\r\n    };\r\n    VisTimelineItems.prototype.flush = function () {\r\n        _super.prototype.flush.call(this);\r\n    };\r\n    VisTimelineItems.prototype.forEach = function (callback, options) {\r\n        _super.prototype.forEach.call(this, callback, options);\r\n    };\r\n    VisTimelineItems.prototype.getAll = function (options) {\r\n        return _super.prototype.get.call(this, options);\r\n    };\r\n    VisTimelineItems.prototype.getById = function (id, options) {\r\n        return _super.prototype.get.call(this, id, options);\r\n    };\r\n    VisTimelineItems.prototype.getByIds = function (ids, options) {\r\n        return _super.prototype.get.call(this, ids, options);\r\n    };\r\n    VisTimelineItems.prototype.getDataSet = function () {\r\n        return _super.prototype.getDataSet.call(this);\r\n    };\r\n    VisTimelineItems.prototype.getIds = function (options) {\r\n        return _super.prototype.getIds.call(this, options);\r\n    };\r\n    VisTimelineItems.prototype.map = function (callback, options) {\r\n        return _super.prototype.map.call(this, callback, options);\r\n    };\r\n    VisTimelineItems.prototype.max = function (field) {\r\n        return _super.prototype.max.call(this, field);\r\n    };\r\n    VisTimelineItems.prototype.min = function (field) {\r\n        return _super.prototype.min.call(this, field);\r\n    };\r\n    VisTimelineItems.prototype.on = function (event, callback) {\r\n        _super.prototype.on.call(this, event, callback);\r\n    };\r\n    VisTimelineItems.prototype.off = function (event, callback) {\r\n        _super.prototype.off.call(this, event, callback);\r\n    };\r\n    VisTimelineItems.prototype.removeItems = function (ids, senderId) {\r\n        return _super.prototype.remove.call(this, ids, senderId);\r\n    };\r\n    VisTimelineItems.prototype.setOptions = function (options) {\r\n        _super.prototype.setOptions.call(this, options);\r\n    };\r\n    VisTimelineItems.prototype.update = function (data, senderId) {\r\n        return _super.prototype.update.call(this, data, senderId);\r\n    };\r\n    return VisTimelineItems;\r\n}(Vis.DataSet));\r\nexports.VisTimelineItems = VisTimelineItems;\r\nvar VisTimelineGroups = (function (_super) {\r\n    __extends(VisTimelineGroups, _super);\r\n    function VisTimelineGroups(data, options) {\r\n        return _super.call(this, data, options) || this;\r\n    }\r\n    VisTimelineGroups.prototype.getLength = function () {\r\n        return this.length;\r\n    };\r\n    VisTimelineGroups.prototype.add = function (data, senderId) {\r\n        return _super.prototype.add.call(this, data, senderId);\r\n    };\r\n    VisTimelineGroups.prototype.clear = function (senderId) {\r\n        return _super.prototype.clear.call(this, senderId);\r\n    };\r\n    VisTimelineGroups.prototype.distinct = function (field) {\r\n        return _super.prototype.distinct.call(this, field);\r\n    };\r\n    VisTimelineGroups.prototype.flush = function () {\r\n        _super.prototype.flush.call(this);\r\n    };\r\n    VisTimelineGroups.prototype.forEach = function (callback, options) {\r\n        _super.prototype.forEach.call(this, callback, options);\r\n    };\r\n    VisTimelineGroups.prototype.getAll = function (options) {\r\n        return _super.prototype.get.call(this, options);\r\n    };\r\n    VisTimelineGroups.prototype.getById = function (id, options) {\r\n        return _super.prototype.get.call(this, id, options);\r\n    };\r\n    VisTimelineGroups.prototype.getByIds = function (ids, options) {\r\n        return _super.prototype.get.call(this, ids, options);\r\n    };\r\n    VisTimelineGroups.prototype.getDataSet = function () {\r\n        return _super.prototype.getDataSet.call(this);\r\n    };\r\n    VisTimelineGroups.prototype.getIds = function (options) {\r\n        return _super.prototype.getIds.call(this, options);\r\n    };\r\n    VisTimelineGroups.prototype.map = function (callback, options) {\r\n        return _super.prototype.map.call(this, callback, options);\r\n    };\r\n    VisTimelineGroups.prototype.max = function (field) {\r\n        return _super.prototype.max.call(this, field);\r\n    };\r\n    VisTimelineGroups.prototype.min = function (field) {\r\n        return _super.prototype.min.call(this, field);\r\n    };\r\n    VisTimelineGroups.prototype.on = function (event, callback) {\r\n        _super.prototype.on.call(this, event, callback);\r\n    };\r\n    VisTimelineGroups.prototype.off = function (event, callback) {\r\n        _super.prototype.off.call(this, event, callback);\r\n    };\r\n    VisTimelineGroups.prototype.removeItems = function (ids, senderId) {\r\n        return _super.prototype.remove.call(this, ids, senderId);\r\n    };\r\n    VisTimelineGroups.prototype.setOptions = function (options) {\r\n        _super.prototype.setOptions.call(this, options);\r\n    };\r\n    VisTimelineGroups.prototype.update = function (data, senderId) {\r\n        return _super.prototype.update.call(this, data, senderId);\r\n    };\r\n    return VisTimelineGroups;\r\n}(Vis.DataSet));\r\nexports.VisTimelineGroups = VisTimelineGroups;\r\nvar VisTimeline = (function (_super) {\r\n    __extends(VisTimeline, _super);\r\n    function VisTimeline() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return VisTimeline;\r\n}(Vis.Timeline));\r\nexports.VisTimeline = VisTimeline;\r\n__export(require(\"./vis-timeline.service\"));\r\n__export(require(\"./vis-timeline.directive\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ng2-vis/components/timeline/index.js\n// module id = 304\n// module chunks = 1","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = require(\"@angular/core\");\r\nvar index_1 = require(\"./index\");\r\n/**\r\n * A service to create, manage and control VisNetwork instances.\r\n *\r\n * @export\r\n * @class VisNetworkService\r\n */\r\nvar VisNetworkService = (function () {\r\n    function VisNetworkService() {\r\n        /**\r\n         * Fired when the user clicks the mouse or taps on a touchscreen device.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.click = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when the user double clicks the mouse or double taps on a touchscreen device.\r\n         * Since a double click is in fact 2 clicks, 2 click events are fired, followed by a double click event.\r\n         * If you do not want to use the click events if a double click event is fired,\r\n         * just check the time between click events before processing them.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.doubleClick = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when the user click on the canvas with the right mouse button.\r\n         * The right mouse button does not select by default.\r\n         * You can use the method getNodeAt to select the node if you want.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.oncontext = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when the user clicks and holds the mouse or taps and holds on a touchscreen device.\r\n         * A click event is also fired in this case.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.hold = new core_1.EventEmitter();\r\n        /**\r\n         * Fired after drawing on the canvas has been completed.\r\n         * Can be used to draw on top of the network.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.release = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when the selection has changed by user action.\r\n         * This means a node or edge has been selected, added to the selection or deselected.\r\n         * All select events are only triggered on click and hold.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.select = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when a node has been selected by the user.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.selectNode = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when a edge has been selected by the user.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.selectEdge = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when a node (or nodes) has (or have) been deselected by the user.\r\n         * The previous selection is the list of nodes and edges that were selected before the last user event.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.deselectNode = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when a edge (or edges) has (or have) been deselected by the user.\r\n         * The previous selection is the list of nodes and edges that were selected before the last user event.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.deselectEdge = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when starting a drag.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.dragStart = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when dragging node(s) or the view.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.dragging = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when the drag has finished.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.dragEnd = new core_1.EventEmitter();\r\n        /**\r\n         * Fired if the option interaction:{hover:true} is enabled and the mouse hovers over a node.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.hoverNode = new core_1.EventEmitter();\r\n        /**\r\n         * Fired if the option interaction:{hover:true} is enabled and\r\n         * the mouse moved away from a node it was hovering over before.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.blurNode = new core_1.EventEmitter();\r\n        /**\r\n         * Fired if the option interaction:{hover:true} is enabled and the mouse hovers over an edge.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.hoverEdge = new core_1.EventEmitter();\r\n        /**\r\n         * Fired if the option interaction:{hover:true} is enabled and\r\n         * the mouse moved away from an edge it was hovering over before.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.blurEdge = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when the user zooms in or out.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.zoom = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when the popup (tooltip) is shown.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.showPopup = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when the popup (tooltip) is hidden.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.hidePopup = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when stabilization starts.\r\n         * This is also the case when you drag a node and the physics\r\n         * simulation restarts to stabilize again.\r\n         * Stabilization does not neccesarily imply 'without showing'.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.startStabilizing = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when a multiple of the updateInterval number of iterations is reached.\r\n         * This only occurs in the 'hidden' stabilization.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.stabilizationProgress = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when the 'hidden' stabilization finishes.\r\n         * This does not necessarily mean the network is stabilized;\r\n         * it could also mean that the amount of iterations defined in the options has been reached.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.stabilizationIterationsDone = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when the 'hidden' stabilization finishes.\r\n         * This does not necessarily mean the network is stabilized;\r\n         * it could also mean that the amount of iterations defined in the options has been reached.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.stabilized = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when the size of the canvas has been resized,\r\n         * either by a redraw call when the container div has changed in size,\r\n         * a setSize() call with new values or a setOptions() with new width and/or height values.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.resize = new core_1.EventEmitter();\r\n        /**\r\n         * Fired before the redrawing begins.\r\n         * The simulation step has completed at this point.\r\n         * Can be used to move custom elements before starting drawing the new frame.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.initRedraw = new core_1.EventEmitter();\r\n        /**\r\n         * Fired after the canvas has been cleared, scaled and translated to\r\n         * the viewing position but before all edges and nodes are drawn.\r\n         * Can be used to draw behind the network.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.beforeDrawing = new core_1.EventEmitter();\r\n        /**\r\n         * Fired after drawing on the canvas has been completed.\r\n         * Can be used to draw on top of the network.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.afterDrawing = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when an animation is finished.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.animationFinished = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when a user changes any option in the configurator.\r\n         * The options object can be used with the setOptions method or stringified using JSON.stringify().\r\n         * You do not have to manually put the options into the network: this is done automatically.\r\n         * You can use the event to store user options in the database.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkService\r\n         */\r\n        this.configChange = new core_1.EventEmitter();\r\n        this.networks = {};\r\n    }\r\n    /**\r\n     * Creates a new network instance.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @param {HTMLElement} container The HTML element that contains the network view.\r\n     * @param {VisNetworkData} data The initial network nodes and edges.\r\n     * @param {VisNetworkOptions} [options] The network options.\r\n     *\r\n     * @throws {Error} Thrown when a network with the same name already exists.\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.create = function (visNetwork, container, data, options) {\r\n        if (this.networks[visNetwork]) {\r\n            throw new Error(\"Network with id \" + visNetwork + \" already exists.\");\r\n        }\r\n        this.networks[visNetwork] = new index_1.VisNetwork(container, data, options);\r\n    };\r\n    /**\r\n     * Remove the network from the DOM and remove all Hammer bindings and references.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.destroy = function (visNetwork) {\r\n        if (this.networks[visNetwork]) {\r\n            this.networks[visNetwork].destroy();\r\n            delete this.networks[visNetwork];\r\n        }\r\n    };\r\n    /**\r\n     * Activates an event.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @param {VisNetworkEvents} eventName The event name.\r\n     * @param {boolean} preventDefault Stops the default behavior of the event.\r\n     * @returns {boolean} Returns true when the event was activated.\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.on = function (visNetwork, eventName, preventDefault) {\r\n        if (this.networks[visNetwork]) {\r\n            var that_1 = this;\r\n            this.networks[visNetwork].on(eventName, function (params) {\r\n                var emitter = that_1[eventName];\r\n                if (emitter) {\r\n                    emitter.emit(params ? [visNetwork].concat(params) : visNetwork);\r\n                }\r\n                if (preventDefault && params.event) {\r\n                    params.event.preventDefault();\r\n                }\r\n            });\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Deactivates an event.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @param {VisNetworkEvents} eventName The event name.\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.off = function (visNetwork, eventName) {\r\n        if (this.networks[visNetwork]) {\r\n            this.networks[visNetwork].off(eventName);\r\n        }\r\n    };\r\n    /**\r\n     * Activates an event listener only once.\r\n     * After it has taken place, the event listener will be removed.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @param {VisNetworkEvents} eventName The event name.\r\n     * @returns {boolean} Returns true when the event was activated.\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.once = function (visNetwork, eventName) {\r\n        var _this = this;\r\n        if (this.networks[visNetwork]) {\r\n            var that_2 = this;\r\n            this.networks[visNetwork].on(eventName, function (params) {\r\n                var emitter = that_2[eventName];\r\n                if (emitter) {\r\n                    emitter.emit(params ? [visNetwork].concat(params) : visNetwork);\r\n                    _this.off(visNetwork, eventName);\r\n                }\r\n            });\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Override all the data in the network.\r\n     * If stabilization is enabled in the physics module,\r\n     * the network will stabilize again.\r\n     * This method is also performed when first initializing the network.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @param {VisNetworkData} data The network data.\r\n     *\r\n     * @throws {Error} Thrown when the network does not exist.\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.setData = function (visNetwork, data) {\r\n        if (this.networks[visNetwork]) {\r\n            this.networks[visNetwork].setData(data);\r\n        }\r\n        else {\r\n            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n        }\r\n    };\r\n    /**\r\n     * Set the options.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @param {VisNetworkOptions} options The network options.\r\n     *\r\n     * @throws {Error} Thrown when the network does not exist.\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.setOptions = function (visNetwork, options) {\r\n        if (this.networks[visNetwork]) {\r\n            this.networks[visNetwork].setOptions(options);\r\n        }\r\n        else {\r\n            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n        }\r\n    };\r\n    /**\r\n     * Selects the nodes corresponding to the id's in the input array.\r\n     * This method unselects all other objects before selecting its own objects.\r\n     * Does not fire events.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @param {VisId[]} nodeIds The node ids that should be selected.\r\n     * @param {boolean} [highlightEdges] If highlightEdges is true or undefined,\r\n     *                                   the neighbouring edges will also be selected.\r\n     *\r\n     * @throws {Error} Thrown when the network does not exist.\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.selectNodes = function (visNetwork, nodeIds, highlightEdges) {\r\n        if (this.networks[visNetwork]) {\r\n            this.networks[visNetwork].selectNodes(nodeIds, highlightEdges);\r\n        }\r\n        else {\r\n            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns an object with selected nodes and edges ids.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @returns {{ nodes: VisId[], edges: VisId[] }}\r\n     * The selected node and edge ids or undefined when the network does not exist.\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.getSelection = function (visNetwork) {\r\n        if (this.networks[visNetwork]) {\r\n            return this.networks[visNetwork].getSelection();\r\n        }\r\n        return undefined;\r\n    };\r\n    /**\r\n     * Returns an array of selected node ids.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @returns {VisId[]} The selected node ids or undefined when the network does not exist.\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.getSelectedNodes = function (visNetwork) {\r\n        if (this.networks[visNetwork]) {\r\n            return this.networks[visNetwork].getSelectedNodes();\r\n        }\r\n        return undefined;\r\n    };\r\n    /**\r\n     * Returns an array of selected edge ids.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @returns {VisId[]} The selected edge ids or undefined when the network does not exist.\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.getSelectedEdges = function (visNetwork) {\r\n        if (this.networks[visNetwork]) {\r\n            return this.networks[visNetwork].getSelectedEdges();\r\n        }\r\n        return undefined;\r\n    };\r\n    /**\r\n     * Unselect all objects.\r\n     * Does not fire events.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     *\r\n     * @throws {Error} Thrown when the network does not exist.\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.unselectAll = function (visNetwork) {\r\n        if (this.networks[visNetwork]) {\r\n            this.networks[visNetwork].unselectAll();\r\n        }\r\n        else {\r\n            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n        }\r\n    };\r\n    /**\r\n     * Zooms out so all nodes fit on the canvas.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @param {VisFitOptions} [options] Options to customize.\r\n     *\r\n     * @throws {Error} Thrown when the network does not exist.\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.fit = function (visNetwork, options) {\r\n        if (this.networks[visNetwork]) {\r\n            this.networks[visNetwork].fit(options);\r\n        }\r\n        else {\r\n            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n        }\r\n    };\r\n    /**\r\n     * Redraw the network.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     *\r\n     * @throws {Error} Thrown when the network does not exist.\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.redraw = function (visNetwork) {\r\n        if (this.networks[visNetwork]) {\r\n            this.networks[visNetwork].redraw();\r\n        }\r\n        else {\r\n            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n        }\r\n    };\r\n    /**\r\n     * Programatically enable the edit mode.\r\n     * Similar effect to pressing the edit button.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     *\r\n     * @throws {Error} Thrown when the network does not exist.\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.enableEditMode = function (visNetwork) {\r\n        if (this.networks[visNetwork]) {\r\n            this.networks[visNetwork].enableEditMode();\r\n        }\r\n        else {\r\n            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n        }\r\n    };\r\n    /**\r\n     * Go into addEdge mode.\r\n     * The explaination from addNodeMode applies here as well.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     *\r\n     * @throws {Error} Thrown when the network does not exist.\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.addEdgeMode = function (visNetwork) {\r\n        if (this.networks[visNetwork]) {\r\n            this.networks[visNetwork].addEdgeMode();\r\n        }\r\n        else {\r\n            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n        }\r\n    };\r\n    /**\r\n     * Programatically disable the edit mode.\r\n     * Similar effect to pressing the close icon\r\n     * (small cross in the corner of the toolbar).\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     *\r\n     * @throws {Error} Thrown when the network does not exist.\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.disableEditMode = function (visNetwork) {\r\n        if (this.networks[visNetwork]) {\r\n            this.networks[visNetwork].disableEditMode();\r\n        }\r\n        else {\r\n            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n        }\r\n    };\r\n    /**\r\n     * Delete selected.\r\n     * Having edit mode or manipulation enabled is not required.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     *\r\n     * @throws {Error} Thrown when the network does not exist.\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.deleteSelected = function (visNetwork) {\r\n        if (this.networks[visNetwork]) {\r\n            this.networks[visNetwork].deleteSelected();\r\n        }\r\n        else {\r\n            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n        }\r\n    };\r\n    /**\r\n     * Makes a cluster.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @param {VisClusterOptions} [options] The joinCondition function is presented with all nodes.\r\n     *\r\n     * @throws {Error} Thrown when the network does not exist.\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.cluster = function (visNetwork, options) {\r\n        if (this.networks[visNetwork]) {\r\n            this.networks[visNetwork].cluster(options);\r\n        }\r\n        else {\r\n            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n        }\r\n    };\r\n    /**\r\n     * This method looks at the provided node and makes a cluster of it and all it's connected nodes.\r\n     * The behaviour can be customized by proving the options object.\r\n     * All options of this object are explained below.\r\n     * The joinCondition is only presented with the connected nodes.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @param {VisId} nodeId the id of the node\r\n     * @param {VisClusterOptions} [options] the cluster options\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.clusterByConnection = function (visNetwork, nodeId, options) {\r\n        if (this.networks[visNetwork]) {\r\n            this.networks[visNetwork].clusterByConnection(nodeId, options);\r\n        }\r\n        else {\r\n            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n        }\r\n    };\r\n    /**\r\n     * This method checks all nodes in the network and those with a equal or higher\r\n     * amount of edges than specified with the hubsize qualify.\r\n     * If a hubsize is not defined, the hubsize will be determined as the average\r\n     * value plus two standard deviations.\r\n     * For all qualifying nodes, clusterByConnection is performed on each of them.\r\n     * The options object is described for clusterByConnection and does the same here.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @param {number} [hubsize] optional hubsize\r\n     * @param {VisClusterOptions} [options] optional cluster options\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.clusterByHubsize = function (visNetwork, hubsize, options) {\r\n        if (this.networks[visNetwork]) {\r\n            this.networks[visNetwork].clusterByHubsize(hubsize, options);\r\n        }\r\n        else {\r\n            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n        }\r\n    };\r\n    /**\r\n     * This method will cluster all nodes with 1 edge with their respective connected node.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @param {VisClusterOptions} [options] optional cluster options\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.clusterOutliers = function (visNetwork, options) {\r\n        if (this.networks[visNetwork]) {\r\n            this.networks[visNetwork].clusterOutliers(options);\r\n        }\r\n        else {\r\n            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n        }\r\n    };\r\n    /**\r\n     * Nodes can be in clusters.\r\n     * Clusters can also be in clusters.\r\n     * This function returns an array of nodeIds showing where the node is.\r\n     *\r\n     * Example:\r\n     * cluster 'A' contains cluster 'B', cluster 'B' contains cluster 'C',\r\n     * cluster 'C' contains node 'fred'.\r\n     *\r\n     * network.clustering.findNode('fred') will return ['A','B','C','fred'].\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @param {VisId} nodeId the node id.\r\n     * @returns {VisId[]} an array of nodeIds showing where the node is\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.findNode = function (visNetwork, nodeId) {\r\n        if (this.networks[visNetwork]) {\r\n            return this.networks[visNetwork].findNode(nodeId);\r\n        }\r\n        else {\r\n            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n        }\r\n    };\r\n    /**\r\n     * Similar to findNode in that it returns all the edge ids that were\r\n     * created from the provided edge during clustering.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @param {VisId} baseEdgeId the base edge id\r\n     * @returns {VisId[]} an array of edgeIds\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.getClusteredEdges = function (visNetwork, baseEdgeId) {\r\n        if (this.networks[visNetwork]) {\r\n            return this.networks[visNetwork].getClusteredEdges(baseEdgeId);\r\n        }\r\n        else {\r\n            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n        }\r\n    };\r\n    /**\r\n     * When a clusteredEdgeId is available, this method will return the original\r\n     * baseEdgeId provided in data.edges ie.\r\n     * After clustering the 'SelectEdge' event is fired but provides only the clustered edge.\r\n     * This method can then be used to return the baseEdgeId.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @param {VisId} clusteredEdgeId\r\n     * @returns {VisId}\r\n     *\r\n     * @memberOf VisNetworkService\r\n     *\r\n     */\r\n    VisNetworkService.prototype.getBaseEdge = function (visNetwork, clusteredEdgeId) {\r\n        if (this.networks[visNetwork]) {\r\n            return this.networks[visNetwork].getBaseEdge(clusteredEdgeId);\r\n        }\r\n        else {\r\n            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n        }\r\n    };\r\n    /**\r\n     * Visible edges between clustered nodes are not the same edge as the ones provided\r\n     * in data.edges passed on network creation. With each layer of clustering, copies of\r\n     * the edges between clusters are created and the previous edges are hidden,\r\n     * until the cluster is opened. This method takes an edgeId (ie. a base edgeId from data.edges)\r\n     * and applys the options to it and any edges that were created from it while clustering.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @param {VisId} startEdgeId\r\n     * @param {VisEdgeOptions} [options]\r\n     *\r\n     * @memberOf VisNetworkService\r\n     *\r\n     */\r\n    VisNetworkService.prototype.updateEdge = function (visNetwork, startEdgeId, options) {\r\n        if (this.networks[visNetwork]) {\r\n            this.networks[visNetwork].updateEdge(startEdgeId, options);\r\n        }\r\n        else {\r\n            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n        }\r\n    };\r\n    /**\r\n     * Clustered Nodes when created are not contained in the original data.nodes\r\n     * passed on network creation. This method updates the cluster node.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @param {VisId} clusteredNodeId\r\n     * @param {VisNodeOptions} options\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.updateClusteredNode = function (visNetwork, clusteredNodeId, options) {\r\n        if (this.networks[visNetwork]) {\r\n            this.networks[visNetwork].updateClusteredNode(clusteredNodeId, options);\r\n        }\r\n        else {\r\n            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns an array of all nodeIds of the nodes that\r\n     * would be released if you open the cluster.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @param {VisId} clusterNodeId the id of the cluster node\r\n     * @returns {VisId[]}\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.getNodesInCluster = function (visNetwork, clusterNodeId) {\r\n        if (this.networks[visNetwork]) {\r\n            return this.networks[visNetwork].getNodesInCluster(clusterNodeId);\r\n        }\r\n        else {\r\n            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n        }\r\n    };\r\n    /**\r\n     * Opens the cluster, releases the contained nodes and edges,\r\n     * removing the cluster node and cluster edges.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @param {VisId} nodeId The node id that represents the cluster.\r\n     * @param {VisOpenClusterOptions} [options] Cluster options.\r\n     *\r\n     * @throws {Error} Thrown when the network does not exist.\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.openCluster = function (visNetwork, nodeId, options) {\r\n        if (this.networks[visNetwork]) {\r\n            this.networks[visNetwork].openCluster(nodeId, options);\r\n        }\r\n        else {\r\n            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns true if the node whose ID has been supplied is a cluster.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @param {VisId} nodeId The associated node id.\r\n     * @returns {boolean} True if the node whose ID has been supplied is a cluster.\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.isCluster = function (visNetwork, nodeId) {\r\n        if (this.networks[visNetwork]) {\r\n            return this.networks[visNetwork].isCluster(nodeId);\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * If you like the layout of your network and would like it to start in the same way next time,\r\n     * ask for the seed using this method and put it in the layout.randomSeed option.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @returns {number} The seed of the current network or -1 when the network is not defined.\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.getSeed = function (visNetwork) {\r\n        if (this.networks[visNetwork]) {\r\n            return this.networks[visNetwork].getSeed();\r\n        }\r\n        return -1;\r\n    };\r\n    /**\r\n     * This function converts canvas coordinates to coordinates on the DOM.\r\n     * Input and output are in the form of {x:Number,y:Number}.\r\n     * The DOM values are relative to the network container.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @param {Position} position The canvas position.\r\n     * @returns {Position} The DOM position.\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.canvasToDOM = function (visNetwork, position) {\r\n        return this.networks[visNetwork].canvasToDOM(position);\r\n    };\r\n    /**\r\n     * This function converts DOM coordinates to coordinates on the canvas.\r\n     * Input and output are in the form of {x:Number,y:Number}.\r\n     * The DOM values are relative to the network container.\r\n     *\r\n     * @param {string} visNetwork The network name/identifier.\r\n     * @param {Position} position The DOM position.\r\n     * @returns {Position} The canvas position.\r\n     *\r\n     * @memberOf VisNetworkService\r\n     */\r\n    VisNetworkService.prototype.DOMtoCanvas = function (visNetwork, position) {\r\n        return this.networks[visNetwork].DOMtoCanvas(position);\r\n    };\r\n    return VisNetworkService;\r\n}());\r\nVisNetworkService = __decorate([\r\n    core_1.Injectable()\r\n], VisNetworkService);\r\nexports.VisNetworkService = VisNetworkService;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ng2-vis/components/network/vis-network.service.js\n// module id = 331\n// module chunks = 1","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = require(\"@angular/core\");\r\nvar index_1 = require(\"./index\");\r\n/**\r\n * A service to create, manage and control VisTimeline instances.\r\n *\r\n * @export\r\n * @class VisTimelineService\r\n */\r\nvar VisTimelineService = (function () {\r\n    function VisTimelineService() {\r\n        /**\r\n         * Fired when the current time bar redraws.\r\n         * The rate depends on the zoom level.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.currentTimeTick = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when clicked inside the Timeline.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.click = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when right-clicked inside the Timeline.\r\n         * Note that in order to prevent the context menu from showing up,\r\n         * default behavior of the event must be stopped.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.contextmenu = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when double clicked inside the Timeline.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.doubleClick = new core_1.EventEmitter();\r\n        /**\r\n         * \tFired after the dragging of a group is finished.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.groupDragged = new core_1.EventEmitter();\r\n        /**\r\n         * Fired once after each graph redraw.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.changed = new core_1.EventEmitter();\r\n        /**\r\n         * Fired repeatedly when the timeline window is being changed.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.rangechange = new core_1.EventEmitter();\r\n        /**\r\n         * Fired once after the timeline window has been changed.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.rangechanged = new core_1.EventEmitter();\r\n        /**\r\n         * Fired after the user selects or deselects items by tapping or holding them.\r\n         * When a use taps an already selected item, the select event is fired again.\r\n         * Not fired when the method setSelectionis executed.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.select = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when the user moves the mouse over an item.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.itemover = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when the user moves the mouse out of an item.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.itemout = new core_1.EventEmitter();\r\n        /**\r\n         * Fired repeatedly when the user is dragging the custom time bar.\r\n         * Only available when the custom time bar is enabled.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.timechange = new core_1.EventEmitter();\r\n        /**\r\n         * Fired once after the user has dragged the custom time bar.\r\n         * Only available when the custom time bar is enabled.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.timechanged = new core_1.EventEmitter();\r\n        this.timelines = {};\r\n    }\r\n    /**\r\n     * Creates a new timeline instance.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {HTMLElement} container The HTML element that contains the timeline view.\r\n     * @param {VisTimelineItems} items The initial timeline items.\r\n     * @param {VisTimelineOptions} [options] The timeline options.\r\n     *\r\n     * @throws {Error} Thrown when timeline already exists.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.createWithItems = function (visTimeline, container, items, options) {\r\n        if (this.timelines[visTimeline]) {\r\n            throw new Error(this.alreadyExistsError(visTimeline));\r\n        }\r\n        this.timelines[visTimeline] = new index_1.VisTimeline(container, items, options);\r\n    };\r\n    /**\r\n     * Creates a new timeline instance.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {HTMLElement} container The HTML element that contains the timeline view.\r\n     * @param {VisTimelineItems} items The initial timeline items.\r\n     * @param {VisTimelineGroups} groups The initial timeline groups.\r\n     * @param {VisTimelineOptions} [options] The timeline options.\r\n     *\r\n     * @throws {Error} Thrown when timeline already exists.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.createWithItemsAndGroups = function (visTimeline, container, items, groups, options) {\r\n        if (this.timelines[visTimeline]) {\r\n            throw new Error(this.alreadyExistsError(visTimeline));\r\n        }\r\n        this.timelines[visTimeline] = new index_1.VisTimeline(container, items, groups, options);\r\n    };\r\n    /**\r\n     * Add new vertical bar representing a custom time that can be dragged by the user.\r\n     * The id is added as CSS class name of the custom time bar,\r\n     * allowing to style multiple time bars differently.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisDate} time Parameter time can be a Date, Number, or String, and is new Date() by default.\r\n     * @param {VisId} [id] Parameter id can be Number or String and is undefined by default.\r\n     * @returns {VisId} The method returns id of the created bar.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.addCustomTime = function (visTimeline, time, id) {\r\n        if (this.timelines[visTimeline]) {\r\n            return this.timelines[visTimeline].addCustomTime(time, id);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Adjust the visible window such that it fits all items.\r\n     * See also function focus(id).\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisTimelineFitOptions} [options] Optional options.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.fit = function (visTimeline, options) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].fit(options);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Adjust the visible window such that the selected item is centered on screen.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisId} id The id of the item.\r\n     * @param {VisTimelineFitOptions} [options] Options options.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.focusOnId = function (visTimeline, id, options) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].focus(id, options);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Adjust the visible window such that the selected items are centered on screen.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisId[]} ids The item ids.\r\n     * @param {VisTimelineFitOptions} [options] Optional options.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.focusOnIds = function (visTimeline, ids, options) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].focus(ids, options);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Get the current time.\r\n     * Only applicable when option showCurrentTime is true.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @returns {Date} The current time.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.getCurrentTime = function (visTimeline) {\r\n        if (this.timelines[visTimeline]) {\r\n            return this.timelines[visTimeline].getCurrentTime();\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Retrieve the custom time from the custom time bar with given id.\r\n     * Id is undefined by default.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisId} [id] The time bar id.\r\n     * @returns {Date} The custom time.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.getCustomTime = function (visTimeline, id) {\r\n        if (this.timelines[visTimeline]) {\r\n            return this.timelines[visTimeline].getCustomTime(id);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Returns an Object with relevant properties from an event.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {Event} event The event.\r\n     * @returns {VisTimelineEventPropertiesResult} Properties of an event\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.getEventProperties = function (visTimeline, event) {\r\n        if (this.timelines[visTimeline]) {\r\n            return this.timelines[visTimeline].getEventProperties(event);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Get the range of all the items as an object containing min: Date and max: Date.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @returns {{ min: Date, max: Date }} The min and max dates.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.getItemRange = function (visTimeline) {\r\n        if (this.timelines[visTimeline]) {\r\n            return this.timelines[visTimeline].getItemRange();\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Get an array with the ids of the currently selected items.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @returns {VisId[]} The currently selected items.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.getSelection = function (visTimeline) {\r\n        if (this.timelines[visTimeline]) {\r\n            return this.timelines[visTimeline].getSelection();\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Get an array with the ids of the currently visible items.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @returns {VisId[]} The currently visible items.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.getVisibleItems = function (visTimeline) {\r\n        if (this.timelines[visTimeline]) {\r\n            return this.timelines[visTimeline].getVisibleItems();\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Get the current visible window.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @returns {{ start: Date, end: Date }} Returns an object with properties start: Date and end: Date.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.getWindow = function (visTimeline) {\r\n        if (this.timelines[visTimeline]) {\r\n            return this.timelines[visTimeline].getWindow();\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * \tMove the window such that given time is centered on screen.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisDate} time Parameter time can be a Date, Number, or String.\r\n     * @param {VisTimelineFitOptions} [options] Optional options.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.moveTo = function (visTimeline, time, options) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].moveTo(time, options);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Force a redraw of the Timeline.\r\n     * The size of all items will be recalculated.\r\n     * Can be useful to manually redraw when option autoResize=false and the window has been resized,\r\n     * or when the items CSS has been changed.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.redraw = function (visTimeline) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].redraw();\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Remove vertical bars previously added to the timeline via addCustomTime method.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisId} id Parameter id is the ID of the custom vertical bar returned by addCustomTime method.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.removeCustomTime = function (visTimeline, id) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].removeCustomTime(id);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Set a current time.\r\n     * This can be used for example to ensure that a client's time is synchronized\r\n     * with a shared server time.\r\n     * Only applicable when option showCurrentTime is true.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisDate} time time can be a Date object, numeric timestamp, or ISO date string.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.setCurrentTime = function (visTimeline, time) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setCurrentTime(time);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * \tAdjust the time of a custom time bar.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisDate} time Parameter time can be a Date object, numeric timestamp, or ISO date string.\r\n     * @param {VisId} [id] Parameter id is the id of the custom time bar, and is undefined by default.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.setCustomTime = function (visTimeline, time, id) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setCustomTime(time, id);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Adjust the title attribute of a custom time bar.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {string} title Parameter title is the string to be set as title.\r\n     *                       Use empty string to hide the title completely.\r\n     * @param {VisId} [id] Parameter id is the id of the custom time bar, and is undefined by default.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.setCustomTimeTitle = function (visTimeline, title, id) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setCustomTimeTitle(title, id);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Set both groups and items at once.\r\n     * Both properties are optional.\r\n     * This is a convenience method for individually calling both setItems(items) and setGroups(groups).\r\n     * Both items and groups can be an Array with Objects, a DataSet (offering 2 way data binding),\r\n     * or a DataView (offering 1 way data binding).\r\n     * For each of the groups, the items of the timeline are filtered on the property group,\r\n     * which must correspond with the id of the group.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {{ groups?: VisTimelineGroups; items?: VisTimelineItems }} data The new timline data.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.setData = function (visTimeline, data) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setData(data);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Set a data set with groups for the Timeline.\r\n     * For each of the groups, the items of the timeline are filtered on the property group,\r\n     * which must correspond with the id of the group.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisTimelineGroups} groups a DataSet (offering 2 way data binding)\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.setGroups = function (visTimeline, groups) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setGroups(groups);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Set a data set with items for the Timeline.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisTimelineItems} items can be an Array with Objects, a DataSet (offering 2 way data binding)\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.setItems = function (visTimeline, items) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setItems(items);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Set or update options.\r\n     * It is possible to change any option of the timeline at any time.\r\n     * You can for example switch orientation on the fly.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisTimelineOptions} options The new options of the timeline.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.setOptions = function (visTimeline, options) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setOptions(options);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Select one item by its id.#\r\n     * The currently selected items will be unselected.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisId} id The id of the item that should be selected.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.setSelectionToId = function (visTimeline, id) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setSelection(id);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Select multiple items by their id.\r\n     * The currently selected items will be unselected.\r\n     * To unselect all selected items, call `setSelection([])`.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisId[]} ids The ids of the irems that should be selected.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.setSelectionToIds = function (visTimeline, ids) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setSelection(ids);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Set the current visible window.\r\n     *\r\n     * If the parameter value of start or end is null, the parameter will be left unchanged.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisDate} start The parameters start can be a Date, Number, or String.\r\n     * @param {VisDate} end The parameters end can be a Date, Number, or String.\r\n     * @param {VisTimelineFitOptions} [options] Optional options.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.setWindow = function (visTimeline, start, end, options) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setWindow(start, end, options);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Destroy the Timeline.\r\n     * The timeline is removed from memory.\r\n     * All DOM elements and event listeners are cleaned up.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.destroy = function (visTimeline) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].destroy();\r\n            delete this.timelines[visTimeline];\r\n        }\r\n    };\r\n    /**\r\n     * Activates an event.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisTimelineEvents} eventName The event name.\r\n     * @param {boolean} preventDefault Stops the default behavior of the event.\r\n     * @returns {boolean} Returns true when the event was activated.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.on = function (visTimeline, eventName, preventDefault) {\r\n        if (this.timelines[visTimeline]) {\r\n            var that_1 = this;\r\n            this.timelines[visTimeline].on(eventName, function (params) {\r\n                var emitter = that_1[eventName];\r\n                if (emitter) {\r\n                    emitter.emit(params ? [visTimeline].concat(params) : visTimeline);\r\n                }\r\n                if (preventDefault && params.event) {\r\n                    params.event.preventDefault();\r\n                }\r\n            });\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Deactivates an event.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisTimelineEvents} eventName The event name.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.off = function (visTimeline, eventName) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].off(eventName, undefined);\r\n        }\r\n    };\r\n    VisTimelineService.prototype.doesNotExistError = function (visTimeline) {\r\n        return \"Timeline with id \" + visTimeline + \" does not exist.\";\r\n    };\r\n    VisTimelineService.prototype.alreadyExistsError = function (visTimeline) {\r\n        return \"Timeline with id \" + visTimeline + \" already exists.\";\r\n    };\r\n    return VisTimelineService;\r\n}());\r\nVisTimelineService = __decorate([\r\n    core_1.Injectable()\r\n], VisTimelineService);\r\nexports.VisTimelineService = VisTimelineService;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ng2-vis/components/timeline/vis-timeline.service.js\n// module id = 332\n// module chunks = 1","import { Component, ViewChild,  OnInit, OnDestroy } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { IonicPage, NavController, ToastController, Slides } from 'ionic-angular';\r\n\r\nimport {\r\n  VisNode,\r\n  VisNodes,\r\n  VisEdges,\r\n  VisNetworkService,\r\n  VisNetworkData,\r\n  VisNetworkOptions } from 'ng2-vis/components/network';\r\n\r\nimport { WelcomePage } from '../pages';\r\nimport { MainPage } from '../pages';\r\n\r\nclass ExampleNetworkData implements VisNetworkData {\r\n  public nodes: VisNodes;\r\n  public edges: VisEdges;\r\n}\r\n\r\n@IonicPage()\r\n@Component({\r\n  selector: 'page-signup',\r\n  templateUrl: 'signup.html'\r\n})\r\n\r\nexport class SignupPage implements OnInit, OnDestroy{\r\n\r\n  public visNetwork: string = 'networkId1';\r\n  public visNetworkData: ExampleNetworkData;\r\n  public visNetworkOptions: VisNetworkOptions;\r\n  public visNetworkService: VisNetworkService;\r\n  \r\n  @ViewChild('signupSlider') signupSlider: any;\r\n\r\n  slideOneForm: FormGroup;\r\n  slideTwoForm: FormGroup;\r\n  slideThreeForm: FormGroup;\r\n  slideFourForm: FormGroup;\r\n  slideFiveForm: FormGroup;\r\n\r\n  submitAttempt: boolean = false;\r\n  lastSlide: boolean = true;\r\n\r\n  // The account fields for the login form.\r\n  // If you're using the username field with or without email, make\r\n  // sure to add it to the type\r\n  account: { name: string, email: string, password: string } = {\r\n    name: 'Test Human',\r\n    email: 'test@example.com',\r\n    password: 'test'\r\n  };\r\n\r\n  // Our translated text strings\r\n  private signupErrorString: string;\r\n\r\n  constructor(public navCtrl: NavController,\r\n    public formBuilder: FormBuilder,\r\n    public toastCtrl: ToastController) {\r\n\r\n    this.slideOneForm = formBuilder.group({\r\n      firstName: ['',  Validators.compose([Validators.maxLength(30), Validators.pattern('[a-zA-Z ]*'), Validators.required])],\r\n      lastName: ['',  Validators.compose([Validators.maxLength(30), Validators.pattern('[a-zA-Z ]*'), Validators.required])],\r\n      phone: [''],\r\n      email: ['']\r\n    });\r\n\r\n    this.slideTwoForm = formBuilder.group({\r\n      company: [''],\r\n      address: [''],\r\n      postcode: [''],\r\n      city: [''],\r\n      job: ['']\r\n    });\r\n\r\n    this.slideThreeForm = formBuilder.group({\r\n      activity: ['']\r\n    });\r\n\r\n    this.slideFourForm = formBuilder.group({\r\n      client: ['']\r\n    });\r\n\r\n    this.slideFiveForm = formBuilder.group({\r\n      need: ['']\r\n    });\r\n\r\n  }\r\n\r\n  next(){\r\n    console.log(this.signupSlider._activeIndex);\r\n    if (this.signupSlider._activeIndex == 1)\r\n    {\r\n      \r\n    }\r\n    if (this.signupSlider._activeIndex == 4)\r\n      this.navCtrl.push(WelcomePage);\r\n    else if (this.signupSlider._activeIndex == 3){\r\n      this.lastSlide = false;\r\n      this.signupSlider.slideNext();\r\n    }\r\n    else{\r\n      this.lastSlide = true;\r\n      this.signupSlider.slideNext();\r\n    }\r\n\r\n  }\r\n\r\n  prev(){\r\n    console.log(this.signupSlider._activeIndex);\r\n    if (this.signupSlider._activeIndex == 0)\r\n      this.navCtrl.pop();\r\n    else\r\n    {\r\n      this.lastSlide = true;\r\n      this.signupSlider.slidePrev();\r\n    }\r\n  }\r\n\r\n  save(){\r\n    this.submitAttempt = true;\r\n    \r\n       if(!this.slideOneForm.valid){\r\n           this.signupSlider.slideTo(0);\r\n           this.lastSlide = true;\r\n       }\r\n       else if(!this.slideTwoForm.valid){\r\n           this.signupSlider.slideTo(1);\r\n       }\r\n       else {\r\n          this.navCtrl.push(MainPage);\r\n       }\r\n  }\r\n\r\n  public addNode(): void {\r\n    const newId = this.visNetworkData.nodes.getLength() + 1;\r\n    this.visNetworkData.nodes.add({ id: newId.toString(), label: 'Node ' + newId });\r\n  }\r\n\r\n  public networkInitialized(): void {\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n      const nodes = new VisNodes([\r\n          { id: '1', label: 'Node 1' },\r\n          { id: '2', label: 'Node 2' },\r\n          { id: '3', label: 'Node 3' },\r\n          { id: '4', label: 'Node 4' },\r\n          { id: '5', label: 'Node 5', title: 'Title of Node 5' }]);\r\n\r\n      const edges = new VisEdges();\r\n\r\n      this.visNetworkData = {\r\n          nodes,\r\n          edges,\r\n      };\r\n\r\n      this.visNetworkOptions = {\r\n        nodes: {borderWidth:0,shape:\"circle\",color:{background:'#F92C55', highlight:{background:'#F92C55', border: '#F92C55'}},font:{color:'#fff'}},\r\n        physics: {\r\n          stabilization: false,\r\n          minVelocity:  0.01,\r\n          solver: \"repulsion\",\r\n          repulsion: {\r\n            nodeDistance: 40\r\n          }\r\n        }\r\n      };\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n      this.visNetworkService.off(this.visNetwork, 'click');\r\n  }\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/signup/signup.ts","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = require(\"@angular/core\");\r\nvar vis_network_service_1 = require(\"./vis-network.service\");\r\n/**\r\n * Use this directive with a div container to show network data.\r\n *\r\n * @export\r\n * @class VisNetworkDirective\r\n * @implements {OnInit}\r\n * @implements {OnDestroy}\r\n * @implements {OnChanges}\r\n */\r\nvar VisNetworkDirective = (function () {\r\n    /**\r\n     * Creates an instance of VisNetworkDirective.\r\n     *\r\n     * @param {ElementRef} elementRef The HTML element reference.\r\n     * @param {VisNetworkService} visNetworkService The VisNetworkService.\r\n     *\r\n     * @memberOf VisNetworkDirective\r\n     */\r\n    function VisNetworkDirective(elementRef, visNetworkService) {\r\n        this.elementRef = elementRef;\r\n        this.visNetworkService = visNetworkService;\r\n        /**\r\n         * This event will be raised when the network is initialized.\r\n         * At this point of time the network is successfully registered\r\n         * with the VisNetworkService and you can register to events.\r\n         * The event data is the name of the network as a string.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisNetworkDirective\r\n         */\r\n        this.initialized = new core_1.EventEmitter();\r\n        this.isInitialized = false;\r\n        this.visNetworkContainer = elementRef.nativeElement;\r\n    }\r\n    /**\r\n     * Create the network when at least visNetwork and visNetworkData\r\n     * are defined.\r\n     *\r\n     * @memberOf VisNetworkDirective\r\n     */\r\n    VisNetworkDirective.prototype.ngOnInit = function () {\r\n        if (!this.isInitialized && this.visNetwork && this.visNetworkData) {\r\n            this.createNetwork();\r\n        }\r\n    };\r\n    /**\r\n     * Update the network data or options on reference changes to\r\n     * the visNetworkData or visNetworkOptions properties.\r\n     *\r\n     * @param {{[propName: string]: SimpleChange}} changes\r\n     *\r\n     * @memberOf VisNetworkDirective\r\n     */\r\n    VisNetworkDirective.prototype.ngOnChanges = function (changes) {\r\n        if (!this.isInitialized && this.visNetwork && this.visNetworkData) {\r\n            this.createNetwork();\r\n        }\r\n        for (var propertyName in changes) {\r\n            if (changes.hasOwnProperty(propertyName)) {\r\n                var change = changes[propertyName];\r\n                if (!change.isFirstChange()) {\r\n                    if (propertyName === 'visNetworkData') {\r\n                        this.visNetworkService.setData(this.visNetwork, changes[propertyName].currentValue);\r\n                    }\r\n                    if (propertyName === 'visNetworkOptions') {\r\n                        this.visNetworkService.setOptions(this.visNetwork, changes[propertyName].currentValue);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Calls the destroy function for this network instance.\r\n     *\r\n     * @memberOf VisNetworkDirective\r\n     */\r\n    VisNetworkDirective.prototype.ngOnDestroy = function () {\r\n        this.isInitialized = false;\r\n        this.visNetworkService.destroy(this.visNetwork);\r\n    };\r\n    VisNetworkDirective.prototype.createNetwork = function () {\r\n        this.visNetworkService.create(this.visNetwork, this.visNetworkContainer, this.visNetworkData, this.visNetworkOptions);\r\n        this.isInitialized = true;\r\n        this.initialized.emit(this.visNetwork);\r\n    };\r\n    return VisNetworkDirective;\r\n}());\r\n__decorate([\r\n    core_1.Input('visNetwork'),\r\n    __metadata(\"design:type\", String)\r\n], VisNetworkDirective.prototype, \"visNetwork\", void 0);\r\n__decorate([\r\n    core_1.Input(),\r\n    __metadata(\"design:type\", Object)\r\n], VisNetworkDirective.prototype, \"visNetworkData\", void 0);\r\n__decorate([\r\n    core_1.Input(),\r\n    __metadata(\"design:type\", Object)\r\n], VisNetworkDirective.prototype, \"visNetworkOptions\", void 0);\r\n__decorate([\r\n    core_1.Output(),\r\n    __metadata(\"design:type\", core_1.EventEmitter)\r\n], VisNetworkDirective.prototype, \"initialized\", void 0);\r\nVisNetworkDirective = __decorate([\r\n    core_1.Directive({\r\n        selector: '[visNetwork]',\r\n    }),\r\n    __metadata(\"design:paramtypes\", [core_1.ElementRef, vis_network_service_1.VisNetworkService])\r\n], VisNetworkDirective);\r\nexports.VisNetworkDirective = VisNetworkDirective;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ng2-vis/components/network/vis-network.directive.js\n// module id = 604\n// module chunks = 1","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = require(\"@angular/core\");\r\nvar index_1 = require(\"./components/network/index\");\r\nvar index_2 = require(\"./components/timeline/index\");\r\n__export(require(\"./components/index\"));\r\nvar VisModule = (function () {\r\n    function VisModule() {\r\n    }\r\n    return VisModule;\r\n}());\r\nVisModule = __decorate([\r\n    core_1.NgModule({\r\n        declarations: [index_1.VisNetworkDirective, index_2.VisTimelineDirective],\r\n        exports: [index_1.VisNetworkDirective, index_2.VisTimelineDirective],\r\n        providers: [index_1.VisNetworkService, index_2.VisTimelineService],\r\n    })\r\n], VisModule);\r\nexports.VisModule = VisModule;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ng2-vis/ng2-vis.js\n// module id = 605\n// module chunks = 1","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = require(\"@angular/core\");\r\nvar vis_timeline_service_1 = require(\"./vis-timeline.service\");\r\nvar index_1 = require(\"./index\");\r\n/**\r\n * Use this directive with a div container to show timeline data.\r\n *\r\n * @export\r\n * @class VisTimelineDirective\r\n * @implements {OnInit}\r\n * @implements {OnDestroy}\r\n * @implements {OnChanges}\r\n */\r\nvar VisTimelineDirective = (function () {\r\n    /**\r\n     * Creates an instance of VisTimelineDirective.\r\n     *\r\n     * @param {ElementRef} elementRef The HTML element reference.\r\n     * @param {VisTimelineService} visTimelineService The VisTimelineService.\r\n     *\r\n     * @memberOf VisTimelineDirective\r\n     */\r\n    function VisTimelineDirective(elementRef, visTimelineService) {\r\n        this.elementRef = elementRef;\r\n        this.visTimelineService = visTimelineService;\r\n        /**\r\n         * This event will be raised when the timline is initialized.\r\n         * At this point of time the timeline is successfully registered\r\n         * with the VisNetworkService and you can register to events.\r\n         * The event data is the name of the timeline as a string.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineDirective\r\n         */\r\n        this.initialized = new core_1.EventEmitter();\r\n        this.isInitialized = false;\r\n        this.visTimelineContainer = elementRef.nativeElement;\r\n    }\r\n    /**\r\n     * Create the timeline when at least visNetwork and visNetworkData\r\n     * are defined.\r\n     *\r\n     * @memberOf VisTimelineDirective\r\n     */\r\n    VisTimelineDirective.prototype.ngOnInit = function () {\r\n        if (!this.isInitialized && this.visTimeline && this.visTimelineItems) {\r\n            this.createTimeline();\r\n        }\r\n    };\r\n    /**\r\n     * Update the timeline data, groups or options on reference changes to\r\n     * the visTimelineItems, visTimelineGroups or visTimelineOptions properties.\r\n     *\r\n     * @param {{[propName: string]: SimpleChange}} changes\r\n     *\r\n     * @memberOf VisTimelineDirective\r\n     */\r\n    VisTimelineDirective.prototype.ngOnChanges = function (changes) {\r\n        if (!this.isInitialized && this.visTimeline && this.visTimelineItems) {\r\n            this.createTimeline();\r\n        }\r\n        for (var propertyName in changes) {\r\n            if (changes.hasOwnProperty(propertyName)) {\r\n                var change = changes[propertyName];\r\n                if (!change.isFirstChange()) {\r\n                    if (propertyName === 'visTimelineItems') {\r\n                        this.visTimelineService.setItems(this.visTimeline, changes[propertyName].currentValue);\r\n                    }\r\n                    if (propertyName === 'visTimelineOptions') {\r\n                        this.visTimelineService.setOptions(this.visTimeline, changes[propertyName].currentValue);\r\n                    }\r\n                    if (propertyName === 'visTimelineGroups') {\r\n                        this.visTimelineService.setGroups(this.visTimeline, changes[propertyName].currentValue);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Calls the destroy function for this timeline instance.\r\n     *\r\n     *\r\n     * @memberOf VisTimelineDirective\r\n     */\r\n    VisTimelineDirective.prototype.ngOnDestroy = function () {\r\n        this.isInitialized = false;\r\n        this.visTimelineService.destroy(this.visTimeline);\r\n    };\r\n    VisTimelineDirective.prototype.createTimeline = function () {\r\n        if (this.visTimelineGroups) {\r\n            this.visTimelineService.createWithItemsAndGroups(this.visTimeline, this.visTimelineContainer, this.visTimelineItems, this.visTimelineGroups, this.visTimelineOptions);\r\n        }\r\n        else {\r\n            this.visTimelineService.createWithItems(this.visTimeline, this.visTimelineContainer, this.visTimelineItems, this.visTimelineOptions);\r\n        }\r\n        this.isInitialized = true;\r\n        this.initialized.emit(this.visTimeline);\r\n    };\r\n    return VisTimelineDirective;\r\n}());\r\n__decorate([\r\n    core_1.Input('visTimeline'),\r\n    __metadata(\"design:type\", String)\r\n], VisTimelineDirective.prototype, \"visTimeline\", void 0);\r\n__decorate([\r\n    core_1.Input(),\r\n    __metadata(\"design:type\", index_1.VisTimelineItems)\r\n], VisTimelineDirective.prototype, \"visTimelineItems\", void 0);\r\n__decorate([\r\n    core_1.Input(),\r\n    __metadata(\"design:type\", index_1.VisTimelineGroups)\r\n], VisTimelineDirective.prototype, \"visTimelineGroups\", void 0);\r\n__decorate([\r\n    core_1.Input(),\r\n    __metadata(\"design:type\", Object)\r\n], VisTimelineDirective.prototype, \"visTimelineOptions\", void 0);\r\n__decorate([\r\n    core_1.Output(),\r\n    __metadata(\"design:type\", core_1.EventEmitter)\r\n], VisTimelineDirective.prototype, \"initialized\", void 0);\r\nVisTimelineDirective = __decorate([\r\n    core_1.Directive({\r\n        selector: '[visTimeline]',\r\n    }),\r\n    __metadata(\"design:paramtypes\", [core_1.ElementRef, vis_timeline_service_1.VisTimelineService])\r\n], VisTimelineDirective);\r\nexports.VisTimelineDirective = VisTimelineDirective;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ng2-vis/components/timeline/vis-timeline.directive.js\n// module id = 606\n// module chunks = 1","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./timeline/index\"));\r\n__export(require(\"./network/index\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ng2-vis/components/index.js\n// module id = 607\n// module chunks = 1"],"sourceRoot":""}